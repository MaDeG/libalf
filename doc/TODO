
NOTES
=====

* human-readable format for automata (->src/automata.cpp::read_automaton()/write_automaton())
	[general]
	is dfa=true;
	alphabet size=4;
	number of states=5;
	[initial states]
	1,2,3, ...;
	[final states]
	...;
	[transitions]
	q,l,q;
	...;




TODO
====


(priority ordered)

A)

- KVtree algorithm

- check undo and increase_alphabet_size() in angluin

- RPNI algorithm

- documentation (?)

- create new network protocol (similar to JNI) to make switching between JNI and dispatcher easy

- check network/deserialization code for bugs

- implement `extend normalizer' in dispatcher and normalizer (CK: What is that)

- add (de)serialize to NL*

- add normalizer to NL*

- add undo to NL*

- check increase_alphabet_size() in NL*

B)

- efficient Bierman implementation (using DDB instead of MiniSat)

- BL* algorithm

- DeLeTe2

- check idea of assistants in knowledgebase (CK: Do you mean "filters" here?)
  [ problem: when algorithm works with pointers, either the non-normalized does not have
    a pointer or we need to add it each time something is requested. even for bottom... ]

- CPU/MEM stats for biermann

C)

- in AMoRE++: _init and _fini are not working (linker stuff...)

- enable dispatcher to listen on multiple address/port combinations, IPv6 and unix domain sockets


