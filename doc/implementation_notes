# vim: tw=80 fo+=a

NOTES ON SERIALIZATION AND DESERIALIZATION
==========================================

serialized data consists of a stream of int32_t conforming to the following:

1) all values are in network-byte-order
2) the first int32_t notes the length of the upcoming stream. note: the data
   is thus length*4 bytes long (as int32_t is 4 bytes long)

methods shall conform to the following interface:

a) serialization and deserialization as a member function:

	basic_string<int32_t>
	object::serialize();

	bool
	object::deserialize(basic_string<int32_t>::iterator &it, basic_string<int32_t>::iterator limit);

b) serialization and deserialization as a non-member function:

	basic_string<int32_t>
	serialize_object(object &foo);

	bool
	deserialize_object(object &o, basic_string<int32_t>::iterator &it, basic_string<int32_t>::iterator limit);

deserialize shall return true upon success and false upon failure. during
serialization, the iterator it is advanced behind the objects data. it
will not be advanced behind limit. limit will not be evaluated. if limit
is encountered and the serialized object is not fully recovered,
serialization fails.


