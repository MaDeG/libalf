vim: tw=80 fo+=a


PROTOCOL VERSION 1


as of 2009-08-24, this is the current protocol for the dispatcher. for now, this
protocol is a WORK-IN-PROGRESS until marked otherwise.

================================================================================

GENERAL PROTOCOL LAYOUT

the protocol is based on int32_t in network byte order. if not marked different,
any field is an int32_t and any size- or count-field gives the size or count of
int32_t's.

================================================================================

ESTABLISHING A CONNECTION TO THE SERVER

a client may establish a connection to the dispatcher via a socket to a
tcp-port. the default port is 24940 ( 'al', hex 0x61 0x6c ). the port may be
changed in the server via its command-line options.

after connection, the server sends its capabilities (as if requested via the
CAPA command) and goes into interactive mode.

================================================================================

INTERACTIVE MODE

in interactive mode, the server waits for a command from the client. it then
executes the command and sends the reply immediately. after that, it again goes
into interactive mode.

================================================================================

DATA TYPES

int32_t

all fields are, if not marked otherwise, of int32_t (in network-byte order),
i.e. a singed integer of 32 bits.

bool

a bool is a int32_t interpreted in the following way: if 0, it is false.
otherwise it is true.

acceptance

an acceptance is an int32_t interpreted in the following way:
false = 0, unknown = 1, true = 2

object-id

an object-id is an int32_t. any valid object will have an object-id >= 0. a
negative object-id represents an invalid object or means "no object" or "error".

char

a char is an ascii-byte, i.e. it is 8 bits wide. it is used to represent
standard, human readable text.

character-string

a character-string is a length field (int32_t) giving the number of chars,
followed by the announced number of chars. the string is NOT \0-delimited!

================================================================================

PROTOCOL CONSTANTS

enum client_command {
	CLCMD_REQ_CAPA = 0,
	CLCMD_REQ_VERSION = 1,

	CLCMD_DISCONNECT = 10,
	CLCMD_STARTTLS = 11,
	CLCMD_AUTH = 12,

	CLCMD_CREATE_OBJECT = 20,
	CLCMD_DELETE_OBJECT = 21,
	CLCMD_GET_OBJECTTYPE = 22,
	CLCMD_OBJECT_COMMAND = 23,

	CLCMD_HELLO_CARSTEN = 99,

	// reserved for extensions: >= 1000
};

enum object_type {
	OBJ_LOGGER = 0,
	OBJ_KNOWLEDGEBASE = 10,
	OBJ_KNOWLEDGEBASE_ITERATOR = 11,
	OBJ_ALGORITHM = 20,
	OBJ_NORMALIZER = 21,
};

enum logger_command {
	LOGGER_RECEIVE_AND_FLUSH = 0,
	LOGGER_SET_MIN_LOGLEVEL = 1,
	LOGGER_LOG_ALGORITHM = 2,
	LOGGER_NOT_LOG_ALGORITHM = 3,
};

enum knowledgebase_command {
	KNOWLEDGEBASE_SERIALIZE = 0,
	KNOWLEDGEBASE_DESERIALIZE = 1,
	KNOWLEDGEBASE_TO_DOTFILE = 2,
	KNOWLEDGEBASE_TO_STRING = 3,

	KNOWLEDGEBASE_IS_ANSWERED = 10,
	KNOWLEDGEBASE_IS_EMPTY = 11,
	KNOWLEDGEBASE_COUNT_QUERIES = 12,
	KNOWLEDGEBASE_COUNT_ANSWERS = 13,
	KNOWLEDGEBASE_COUNT_RESOLVED_QUERIES = 14,
	KNOWLEDGEBASE_GET_MEMORY_USAGE = 15,

	KNOWLEDGEBASE_RESOLVE_QUERY = 20,
	KNOWLEDGEBASE_RESOLVE_OR_ADD_QUERY = 21,
	KNOWLEDGEBASE_ADD_KNOWLEDGE = 22,

	KNOWLEDGEBASE_GET_QUERY_TREE = 25,
	KNOWLEDGEBASE_MERGE_TREE = 26,

	// iterator:
	KNOWLEDGEBASE_BEGIN = 30,
	KNOWLEDGEBASE_END = 31,
	KNOWLEDGEBASE_QBEGIN = 32,
	KNOWLEDGEBASE_QEND = 33,

	KNOWLEDGEBASE_CLEAR = 40,
	KNOWLEDGEBASE_CLEAR_QUERIES = 41,

	KNOWLEDGEBASE_UNDO = 50,
};

enum knowledgebase_iterator_command {
	KITERATOR_ASSIGN = 0,
	KITERATOR_COMPARE = 1,

	KITERATOR_NEXT = 10,

	KITERATOR_GET_WORD = 20,
	KITERATOR_IS_ANSWERED = 21,
	KITERATOR_GET_ANSWER = 22,
	KITERATOR_ANSWER = 23,
};

enum algorithm_command {
	ALGORITHM_SERIALIZE = 0,
	ALGORITHM_DESERIALIZE = 1,
	ALGORITHM_TO_STRING = 2,

	ALGORITHM_ASSOCIATE_LOGGER = 10,
	ALGORITHM_REMOVE_LOGGER = 11,
	ALGORITHM_SET_KNOWLEDGE_SOURCE = 12,
	ALGORITHM_GET_KNOWLEDGE_SOURCE = 13,
	ALGORITHM_SET_NORMALIZER=14,
	ALGORITHM_GET_NORMALIZER=15,
	ALGORITHM_UNSET_NORMALIZER=16,

	ALGORITHM_GET_MEMORY_STATISTICS = 20,
	ALGORITHM_GET_TIMING_STATISTICS = 21,
	ALGORITHM_ENABLE_TIMING = 22,
	ALGORITHM_DISABLE_TIMING = 23,
	ALGORITHM_RESET_TIMING = 24,

	ALGORITHM_GET_ALPHABET_SIZE = 30,
	ALGORITHM_INCREASE_ALPHABET_SIZE = 31,

	ALGORITHM_CONJECTURE_READY = 40,
	ALGORITHM_ADVANCE = 41,
	ALGORITHM_ADD_COUNTEREXAMPLE = 42,

	ALGORITHM_SUPPORTS_SYNC = 50,
	ALGORITHM_SYNC_TO_KNOWLEDGEBASE = 51,
};

enum normalizer_command {
	NORMALIZER_SERIALIZE = 0,
	NORMALIZER_DESERIALIZE = 1,
	NORMALIZER_DESERIALIZE_EXTENSION = 2,

	NORMALIZER_GET_TYPE = 10,

	NORMALIZER_NORMALIZE_A_WORD_PNF = 20,
	NORMALIZER_NORMALIZE_A_WORD_SNF = 21,
};


================================================================================

CLIENT COMMANDS

a client command consists of the following:
	enum client_command,
then for each parameter:
	parameter

if a parameter is marked with ``[]'', it is of variable size. the size has to be
submitted by the command itself somehow. (see e.g. CLCMD_OBJECT_COMMAND).
otherwise the size of a parameter is exactly one int32_t.


the following commands exist:


request capabilities (CLCMD_REQ_CAPA)
no parameters.
server returns:
	character-string ( space-separated list of capabilities,
			   e.g. "tls auth langen" )


request server/library version string (CLCMD_REQ_VERSION)
no parameters.
server returns:
	character-string


disconnect from server (CLCMD_DISCONNECT)
no parameters.
server returns:
	nothing. closes connection.


enable TLS/SSL (CLCMD_STARTTLS)
parameters:
	FIXME
server returns:
	FIXME


authenticate connection (CLCMD_AUTH)
parameters:
	FIXME
server returns:
	FIXME


create object (CLCMD_CREATE_OBJECT)
parameters:
	enum object_type
server returns:
	object-id (-1 if command failed. check server log for error message)


delete object (CLCMD_DELETE_OBJECT)
parameters:
	object-id
server returns:
	bool (false if object does not exist)


get object type (CLCMD_GET_OBJECTTYPE)
parameters:
	object-id
server returns:
	bool (false if object does not exist)
	enum object_type


object command (CLCMD_OBJECT_COMMAND)
parameters:
	object-id,
	command-id (depending on object-type one of
		enum logger_command,
		enum knowledgebase_command,
		enum algorithm_command,
		enum normalizer_command )
	size of additional parameters,
	additional parameters[]
server returns:
	bool (false if command was invalid)
	-- see specific command --

say hello to carsten (CLCMD_HELLO_CARSTEN)
parameters: 1
	int (how often)
server returns:
	int (how often he said thanks)

================================================================================

LOGGER COMMANDS

receive and flush all data in logger (LOGGER_RECEIVE_AND_FLUSH)
parameters: none.
server returns:
	character-string (logger content)

set minimal log-level (LOGGER_SET_MIN_LOGLEVEL)
parameters: 1
	log-level (1 = error, 2 = warn, 3 = info,  4 = debug)
server returns: nothing.

enable logging of algorithm  (LOGGER_LOG_ALGORITHM)
parameters: none.
server returns: nothing.

disable logging of algorithm (LOGGER_NOT_LOG_ALGORITHM)
parameters: none.
server returns: nothing.

================================================================================

KNOWLEDGEBASE COMMANDS

serialize knowledgebase (KNOWLEDGEBASE_SERIALIZE)
parameters: none
server returns:
	size,
	serialized data[]

deserialize knowledgebase (KNOWLEDGEBASE_DESERIALIZE)
parameters: 2
	size,
	serialized data[]
server returns:
	bool

create dotfile (KNOWLEDGEBASE_TO_DOTFILE)
parameters: none.
server returns:
	character-string

create text-version (KNOWLEDGEBASE_TO_STRING)
parameters: none.
server returns:
	character-string

check if all queries are answered (KNOWLEDGEBASE_IS_ANSWERED)
parameters: none.
server returns:
	bool

check if no knowledge exists (KNOWLEDGEBASE_IS_EMPTY)
parameters: none.
server returns:
	bool

count queries (KNOWLEDGEBASE_COUNT_QUERIES)
parameters: none
server returns:
	query-count

count answers (KNOWLEDGEBASE_COUNT_ANSWERS)
parameters: none
server returns:
	answer-count

count resolved queries (KNOWLEDGEBASE_COUNT_RESOLVED_QUERIES)
parameters: none.
server returns:
	count of resolved queries

resolve query (KNOWLEDGEBASE_RESOLVE_QUERY)
parameters: 2
	size of word
	word[]
server returns:
	bool (false if acceptance is unknown)
	acceptance (undefined if acceptance is unknown)

resolve or add query (KNOWLEDGEBASE_RESOLVE_OR_ADD_QUERY)
parameters: 2
	size of word
	word[]
server returns:
	bool (false if acceptance is unknown. then, word is marked as required)
	acceptance (undefined if acceptance is unknown)

add knowledgebase (KNOWLEDGEBASE_ADD_KNOWLEDGE)
parameters: 3
	size of word
	word[]
	acceptance
server returns:
	bool (false if word was answered differently before)

create query tree (KNOWLEDGEBASE_GET_QUERY_TREE)
parameters: none.
server returns:
	object-id of newly created knowledgebase object

merge other knowledgebase into this (KNOWLEDGEBASE_MERGE_TREE)
parameters: 1
	object-id of other knowledgebase_command
server returns:
	bool (false if object was not of type knowledgebase)
	bool (false if the two bases are inconsistent)

get beginning-iterator (KNOWLEDGEBASE_BEGIN)
parameters: none.
server returns:
	object-id of newly created knowledgebase iterator object

get end-iterator (KNOWLEDGEBASE_END)
parameters: none.
server returns:
	object-id of newly created knowledgebase iterator object

get query-beginning-iterator (KNOWLEDGEBASE_QBEGIN)
parameters: none.
server returns:
	object-id of newly created knowledgebase iterator object

get query-end-iterator (KNOWLEDGEBASE_QEND)
parameters: none.
server returns:
	object-id of newly created knowledgebase iterator object

clear knowledgebase (KNOWLEDGEBASE_CLEAR)
parameters: none.
server returns: nothing.

clear queries (KNOWLEDGEBASE_CLEAR_QUERIES)
parameters: none.
server returns: nothing.

================================================================================

KNOWLEDGEBASE ITERATOR COMMAND

assign other iterator to this one (KITERATOR_ASSIGN)
parameters: 1
	object-id of other knowledgebase-iterator
server returns:
	bool (false if object was not of type knowledgebase-iterator)

compare to other iterator (KITERATOR_COMPARE)
parameters: 1
	object-id of other knowledgebase-iterator
server returns:
	bool (false if object was not of type knowledgebase-iterator)
	bool (false if the two iterators are referencing different words

interator++ (KITERATOR_NEXT)
parameters: none.
server returns: nothing.

get referenced word (KITERATOR_GET_WORD)
parameters: none.
server returns:
	size of word
	word[]

check if referenced word is answered (KITERATOR_IS_ANSWERED)
parameters: none.
server returns:
	bool (false if not answered)

get answer to referenced word (KITERATOR_IS_ANSWERED)
parameters: none.
server returns:
	bool (false if not answered)
	acceptance (undefined if not answered)

set answer to referenced word (KITERATOR_ANSWER)
parameters: 1
	acceptance
server returns:
	bool (false if node was answered differently before)

================================================================================

ALGORITHM COMMANDS

serialize algorithm (ALGORITHM_SERIALIZE)
parameters: none
server returns:
	size,
	serialized data[]

deserialize normalizer (ALGORITHM_DESERIALIZE)
parameters: 2
	size,
	serialized data[]
server returns:
	bool

create text-version (ALGORITHM_TO_STRING)
parameters: none.
server returns:
	character-string



...



================================================================================

NORMALIZER COMMANDS

serialize normalizer (NORMALIZER_SERIALIZE)
parameters: none
server returns:
	size,
	serialized data[]

deserialize normalizer (NORMALIZER_DESERIALIZE)
parameters: 2
	size,
	serialized data[]
server returns:
	bool

deserialize normalizer extension (NORMALIZER_DESERIALIZE_EXTENSION)
parameters: 2
	size,
	serialized data[]
server returns:
	bool

get type of normalizer (NORMALIZER_GET_TYPE)
parameters: none.
server returns:
	type (see enum normalizer::normalizer_type
              in include/libalf/normalizer.h)

calculate prefix-normal form of a word (NORMALIZER_NORMALIZE_A_WORD_PNF)
parameters: 2
	size of word,
	word[]
server returns:
	bool (true if word was normalized to bottom)
	size of word,
	word[]

calculate suffix-normal form of a word (NORMALIZER_NORMALIZE_A_WORD_SNF)
parameters: 2
	size of word,
	word[]
server returns:
	bool (true if word was normalized to bottom)
	size of word,
	word[]

================================================================================

