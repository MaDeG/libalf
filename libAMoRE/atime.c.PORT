/*
 *  Copyright (c) ?    - 2000 Lehrstuhl fuer Informatik VII, RWTH Aachen
 *  Copyright (c) 2000 - 2002 Burak Emir
 *  This file is part of the libAMoRE library.
 *
 *  libAMoRE is  free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with the GNU C Library; if not, write to the Free
 *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307 USA.  
 */

#ifdef DOS
#include <sys\types.h>
#include <sys\timeb.h>
#endif

#ifdef SYS5
#include <sys/types.h>
#include <sys/times.h>
#include <sys/param.h>
#endif

#ifdef BSD43
#include <sys/time.h>
#include <sys/resource.h>
#endif

#ifdef DOS
/* obsolete */
void cpuclock(int who) {
    /* who: procedure which starts the clock must end the clock */
    
    struct timeb ltime;
    if ((running != 0) && (who != running)) return;
    running = who;
    ftime(&ltime);
    if (starttime) {
	endtime = ltime.time*1000+ltime.millitm;
	comptime = endtime - starttime;
	starttime = 0; running  = 0;
    } else {
	starttime = ltime.time*1000+ltime.millitm;
	comptime = 0;
    }
} /* clock */
#endif
/* obsolete */
#ifdef SYS5
void cpuclock(int who) {

     /* who: procedure which starts the clock must end the clock */

    struct tms usedtime;
	if ((running != 0) && (who != running)) return;
	running = who;
	(void)times(&usedtime);
	if (starttime) {
		endtime = ((usedtime.tms_utime* 1000)/HZ) ;
		comptime = endtime - starttime;
		starttime = 0; running  = 0;
	} else {
		starttime = ((usedtime.tms_utime* 1000)/HZ);
		comptime = 0;
	}
} 
/* clock */
#endif
/* obsolete */
#ifdef BSD43
void
cpuclock(who)
int who;
/* who: procedure which starts the clock must end the clock */
{ struct rusage ru;
 if ((running != 0) && (who != running)) return;
 running = who;
 (void) getrusage(RUSAGE_SELF, &ru);
 if (starttime) {
     endtime = ((ru.ru_utime.tv_sec * 1000) + (ru.ru_utime.tv_usec /1000));
     comptime = endtime - starttime;
     starttime = 0; running  = 0;
 } else {
     starttime = ((ru.ru_utime.tv_sec * 1000) + (ru.ru_utime.tv_usec
						 /1000));
     comptime = 0;
 }
} /* clock */
#endif
