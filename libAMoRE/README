vim: tw=80 fo+=a


AMoRE - Automata, Monoid, and Regular Expressions


original copyright see COPYING and README-old.
all changes (c) 2008, 2009, 2010, 2011
by David R. Piegdon <david-i2@piegdon.de>


this once was libAMoRE-1.0. it was heavily changed during development of
libalf. several bugs were removed and things renamed. this is NOT an official
release of libAMoRE but a local branch for libalf! thus please stick to
http://libalf.informatik.rwth-aachen.de/ for any updates.


most notable changes:

	* link to a shared library

	* fixed a bug in rex2nfa (off-by-one in ffprerex)

	* fixed a bug in clonenfa (some pointers were cloned instead of
	  the referenced data)

	* fixed a memory-leak in ldo/rexFromString.c (pinp->buf->info)

	* rename of some fields in nfauto and dfauto
	  (highest_state and alphabet_size)

	* AMoRE-1.0 cluttered the namespace:
	  it had the following types, macros or functions defined:

	  struct set
		renamed to struct ptset_s
		(include/amore/nfa2mnfa_types.h)

	  macro string
		resolved to char*
		(include/amore/typedefs.h>
	  macro newstring
		renamed to newarray_of_char
		(include/amore/ext.h>

	  macro arrayofstring
		renamed to array_of_c_string
		(include/amore/typedefs.h>
	  macro newarrayofstring
		renamed to newarray_of_c_string
		(include/amore/ext.h)

	  macro array
		renamed to array_of_int
		(include/amore/typedefs.h>
	  macro newarray
		renamed to newarray_of_int
		(include/amore/ext.h>
	  function newarray1
		renamed to newarray_of_int1
		(global.c and include/amore/global.h)

	  macro arrayofarray
		renamed to array_of_int_array
		(include/amore/typedefs.h>
	  macro newarrayofarray
		renamed to newarray_of_int_array
		(include/amore/ext.h>

	* initial fixes to make the source compile
	  (some extern declaration problems: "amrp", "text")

	* `` extern "C" '' markers for all headers

	* indentation / code formatting

most notable things NOT changed:

	* newdfa() and newnfa() create a blank new automaton structure
	  (nfauto/dfauto). freedfa() and freenfa() free all data _referenced_ by
	  an automaton structure (nfauto/dfauto), but do not free the structure
	  itself. i personally consider this a bug (or at least bad-documented),
	  but have not fixed it as i do not know if this behaviour is expected
	  internally. so to get rid of an nfauto, you have to freenfa() it and
	  then, if you're working with a pointer (which is reasonable), free it.
	  the same goes for regex and freerex().

